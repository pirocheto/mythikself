from advanced_alchemy.base import UUIDAuditBase
from sqlalchemy.orm import Mapped, mapped_column, relationship


class UserORM(UUIDAuditBase):
    """
    User model representing a user in the system.
    Inherits from UUIDAuditBase for UUID primary key and audit fields.
    """

    __tablename__ = "users"

    google_id: Mapped[str] = mapped_column(unique=True, nullable=False)
    name: Mapped[str] = mapped_column(nullable=False)
    email: Mapped[str] = mapped_column(unique=True, nullable=False)
    picture: Mapped[str] = mapped_column(nullable=True)

    # Relationships
    uploaded_images: Mapped[list["UploadedImageORM"]] = relationship(
        "UploadedImageORM", back_populates="user", cascade="all, delete-orphan"
    )
    generated_images: Mapped[list["GenratedImageORM"]] = relationship(
        "GenratedImageORM", back_populates="user", cascade="all, delete-orphan"
    )


class UploadedImageORM(UUIDAuditBase):
    """
    Image model representing an image uploaded by a user.
    Inherits from UUIDAuditBase for UUID primary key and audit fields.
    """

    __tablename__ = "uploaded_images"

    user_id: Mapped[str] = mapped_column(nullable=False)
    url: Mapped[str] = mapped_column(nullable=False)

    # Relationships
    user: Mapped["UserORM"] = relationship("UserORM", back_populates="images")


class GenratedImageORM(UUIDAuditBase):
    """
    Generated image model representing an image generated by the system.
    Inherits from UUIDAuditBase for UUID primary key and audit fields.
    """

    __tablename__ = "generated_images"

    user_id: Mapped[str] = mapped_column(nullable=False)
    url: Mapped[str] = mapped_column(nullable=False)

    # Relationships
    user: Mapped["UserORM"] = relationship("UserORM", back_populates="images")
